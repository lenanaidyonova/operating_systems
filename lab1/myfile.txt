Лабораторная работа по дисциплине "Операционные системы и среды"
ИНТЕРПРЕТАТОРЫ КОМАНДНОЙ СТРОКИ ОС LINUX

Цели работы:
1) Изучение основных команд пользовательского интерфейса
2) Изучение цикла подготовки и исполнения программ
3) Изучение команд и утилит обработки текстов

Выполнила Найдёнова Елена
Группа 1384

1.2
В директории был создан файл myfile.txt
>myfile.txt

2.1.
Вт 07 фев 2023 19:46:14 MSK ; вывод команды date -- вывод текущей даты
helena   :0           2023-02-07 22:36 (:0) ; вывод команды who -- кто находится в системе
/dev/pts/0 ; вывод команды tty -- полное имя файла-терминала
helena ; вывод команды logname -- входное имя;
Linux ; вывод команды uname -- имя  UNIX-системы  ("имя компьютера")

2.2.
sleep [число] -- команда, заставляющая "спать" систему, указанное число секунд
если ввести sleep 10000, то очередное приглашение '$' появится через 10000 секунд. Если, не дожидаясь конца, вызвать сигнал преывания(SIGNINT -- INTERRUPT), введя символ <^C>, то система перестанет "спать" и сразу появится приглашение '$'.

2.3.
man [команды системы] -- выводит справочник о заданной команде системы
Основные разделы справочников: Name, Synopsis, Description, Options, Examples, Exit Values, Bugs, Author, Copyright, See Also, Files, Caveats, History.

2.4a.
junk myfile.txt temp; вывод команды ls -- команда  перечисляет имена существующих в каталоге файлов

итого 4 ; вывод команды ls -l
-rw-rw-r-- 1 helena helena    0 фев  8 20:44 junk
-rw-rw-r-- 1 helena helena 2405 фев  8 20:42 myfile.txt
-rw-rw-r-- 1 helena helena    0 фев  8 20:44 temp

; -l длинный формат, отображающий типы файлов Unix, разрешения, количество жестких ссылок, владельца, группу, размер, дату и время последнего изменения и имя.

junk ; вывод команды ls junk -- команда выводит имя файла
junk  temp ; ls junk temp -- команда выводит имена файлов junk, temp последовательно

2.4b.
cat [имя файла] -- выводит содержимое файла
Hello! ; вывод команды cat junk
Hello! ; вывод команды cat junk temp
Nice to meet u!

; Когда cat получает несколько аргументов, то последовательно выводит их содержимое

2.4с.
Переименование файла осуществляется пересылкой его от одного имени к другому (mv -- move):
aaa myfile.txt temp ; вывод команды ls, после вызова команды mv junk aaa. 

; mv -b testNew.txt writeFile.txt - происходит перезапись файла
writeFile.txt файлом testNew.txt, при этом ключ -b позволяет сделать
резервную копию файла writeFile.txt
 
; mv -v writeFile.txt test.txt:
переименован 'writeFile.txt' -> 'test.txt'
; ключ -v позволяет выводить информацию о каждом файле, который
обрабатывает команда mv.

Копирование файлов осуществляется с помощью команды cp:
aaa  bbb  myfile.txt  temp ; вывод команды ls, после вызова команды cp aaa bbb.
; Копирование файла с запретом на перезапись существующего файла с помощью
ключа -n:
cp -n sample.txt test.txt
 
; Копирование файла с выводом на подтверждение перезаписи существующего
файла с помощью ключа -i:
cp -i sample.txt test.txt
cp: переписать 'test.txt'? y

Удаляет файлы команда rm:
myfile.txt  temp ; вывод команды ls, после вызова команды rm aaa bbb.

2.5.
/home/helena/oc/lab1 ; вывод команды pwd -- выводит полное имя текущего  каталога
/home/helena/oc/lab1/prog.c - полное имя файла prog.с, лежащего в данной директории

; Если ввести ls и полное имя текущей директории, то то выведутся все файлы/папки, которые находятся в текущей директории, как и при вводе ls 
; Если ввести 'ls /', то выведутся все файлы/папки, которые находятся в корневой директории
bin    dev   lib    libx32      mnt   root  snap      sys  var -- Вывод команды ls /
boot   etc   lib32  lost+found  opt   run   srv       tmp
cdrom  home  lib64  media       proc  sbin  swapfile  usr

; Если ввести 'ls -l /', то выведутся все файлы/папки, которые находятся в корневой директории и их типы, разрешения, количество жестких ссылок, владельца, группу, размер, дату и время последнего изменения и имя.
; В каталоге /bin хранятся все установленные пакеты

; переход в вышележащий каталог выполняется с помощью команды cd ..
; /home/helena/oc - полное имя текущего каталога после ввода cd..
; /home/helena - полное имя текущего каталога после второго ввода cd..
; / - конечная директория, куда мы попадем после нескольких вводов cd... Данная директория называется корневой.

; drwxr-xr-x 20 root root 4096 фев  4  2022 -- вывод команды ls -ld
; Владельцем данных каталогов является root, поэтому пользователь не может их изменять.
; Если написать cd без аргументов, то пользователь вернется в свой домашний каталог

; mkdir [имя_каталога] - создание папки в текущем каталоге
; myfile.txt  prog.c  temp  test -- вывод команды ls, после вызова команды mkdir test
; Чтобы перейти в неё из директории, в которой она была создана, не нужно писать полный маршрутный путь. Его необходимо писать только в случае, если нужная директория отсуствует в текущем каталоге.
; cp ../prog.c . -- копирование в новый каталог файл prog.c из вышележащего каталога
; prog.c -- вывод команды ls в директории test
; Чтобы вернуться в вышележащий каталог можно воспользоваться командой 'cd ..'  или 'cd /home/helena/oc/lab1'
rmdir: не удалось удалить '.': Недопустимый аргумент -- вывод команды rmdir .
; Нельзя удалять директорию, если она непустая и если в ней находится сейчас пользователь.
myfile.txt  prog.c  temp -- вывод команды ls после последовательного удаления файлов в директории, а затем и её самой

2.6.
    PID TTY          TIME CMD ; вывод команды ps
   7200 pts/0    00:00:00 bash
  10310 pts/0    00:00:00 ps
; Более полную информацию о процессах в системе предоставляет команда ps с ключом -A
; ps -- информация о процессах, запущенных с терминала
; ps -A -- информация о всех запущенных процессах

3.
Создан файл prog.c с данным кодом
 #include <stdio.h>
 int main ()
{
printf ("Hello, everybody ! ");
}

Ключ -c генерирует объектный файл, а ключ -o позволяет задать имя исполняемого файла.
cc -c prog.c -- команда для создания объектного файла для prog.c
;Имя объектного файла prog.o для prog.c
Hello, everybody ! -- вывод программы из prog.c
cc prog.c -o hello -- команда для создания исполняемого файла с именем hello

Далее создан файл my_open.c с данным кодом
#include <stdio.h>
int main (int argc, char* argv[]) {
    if (argc > 1) {
        if (fopen(argv[1],"r") == NULL) {
            printf("%s: неудача при попытке открыть файл %s",argv[0],argv[1]);
        }
        else {
            printf("%s: файл %s открыт",argv[0],argv[1]);
        }
    } else {
        printf("открываемый файл не указан");
    }

    return 0;
}

Результаты работы:
1)./my_open: файл prog.c открыт -- был передан существующий файл
2)открываемый файл не указан -- без указания файла
3)./my_open: неудача при попытке открыть файл tyty -- был передан несуществующий файл

Далее был создан файл file_name.c. В нём откорректирован предыдующий код, таким образом, чтобы на печать выводилось имя файла (существующего или не существующего).
Организован конвейер из двух созданных исполняемых программ

Результаты работы:
Файл my_open.c
#include "stdio.h"
int main (argc, argv)
int argc;
char* argv[];
{
    char f[100];
    scanf("%s", f);
        if (fopen(f,"r") == NULL) {
            printf("%s: неудача при попытке открыть файл %s",argv[0], f);
        }
        else {
            printf("%s: файл %s открыт",argv[0], f);
        }
 
    return 0;
}

Файл file_name.c
#include <stdio.h>
int main ()
{
printf ("prog.c");
}

1) ./file_name || ./my_open
prog.c -- так как в первой программе 0 код возврата, то вторая программа не запустилась
Чтобы вторая программа вызвалась необходимо добавить в функцию main return 1.

2) ./file_name | ./my_open
./my_open: файл prog.c открыт -- при использовании команды | вывод file_name был перенаправлен в my_open.

3) ./file_name && ./my_open  -- при использовании команды && происходит вывод работы двух программ последовательно. Если первая программа не скомпилируется, то вторая не запустится
prog.c
./my_open: файл prog.c открыт

4) ./file_name & ./my_open -- при использовании команды & происходит вывод работы первой программы в фоновом режиме
[1] 80944
prog.c
./my_open: файл prog.c открыт[1]+  Завершён        ./file_name

5) ./file_name ; ./my_open -- вызов программ независимо от кода возврата
prog.c 
./my_open: файл prog.c открыт

4.1
1) Вывод всех строк из вывода ls -l /tmp, которые соответствуют каталогам
Команда: ls -l /tmp | grep -E '^d[r,w,x,\-]{9}'
Результат:
drwx------ 4 root   root   4096 фев  8 19:59 snap-private-tmp
drwx------ 2 helena helena 4096 фев  8 19:58 ssh-nvHDzI5hMl6S
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-colord.service-6o4ucf
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-ModemManager.service-hFpG6g
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-switcheroo-control.service-yxcTfi
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-systemd-logind.service-cW2Zdj
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-systemd-resolved.service-u3XaLh
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-systemd-timesyncd.service-su68bh
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-upower.service-gtbP1g
drwx------ 2 helena helena 4096 фев 10 21:30 tracker-extract-files.1000
drwx------ 2 gdm    gdm    4096 фев  8 22:58 tracker-extract-files.125

2) Вывод всех строк из вывода ls -l /tmp, которые соответствуют выполняемым для всех файлам
Команда: ls -l /tmp | grep -E '^(d|\-)[r,w,x,\-]{6}r'
Результат:
drwxrwxrwx 2 helena helena  4096 фев 10 11:46 mintUpdate
-rw-rw-r-- 1 helena helena  2073 фев 10 12:18 xapp-tmp-0x563746ca16b0-1.png

3) Вывод всех строк из вывода ls -l /tmp, которые принадлежат пользователю root
Команда: ls -l /tmp | grep -E '\sroot\s'
Результат:
drwx------ 4 root   root   4096 фев  8 19:59 snap-private-tmp
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-colord.service-6o4ucf
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-ModemManager.service-hFpG6g
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-switcheroo-control.service-yxcTfi
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-systemd-logind.service-cW2Zdj
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-systemd-resolved.service-u3XaLh
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-systemd-timesyncd.service-su68bh
drwx------ 3 root   root   4096 фев  8 22:58 systemd-private-2af358e094fa4be0a6362f7ff3263530-upower.service-gtbP1g

4) Вывод всех строк из вывода ls -l /tmp, которые не принадлежат пользователю root
Команда: ls -l /tmp | grep -Ev '\sroot\s'
Результат:
total 44
-rw------- 1 helena helena    0 фев  8 19:58 config-err-tYBmbI
drwx------ 2 helena helena 4096 фев  8 19:58 ssh-nvHDzI5hMl6S
drwx------ 2 helena helena 4096 фев 10 22:19 tracker-extract-files.1000
drwx------ 2 gdm    gdm    4096 фев  8 22:58 tracker-extract-files.125

4.2
С использованием команды cut определено:
1) номера запущенных Вами процессов;
Команда: ps | cut -d " " -f 3
Результат: 
50785
54207
54208
2) идентификаторы пользователей,  имеющих  x-терминалы на Вашей рабочей станции;
Команда: cat /etc/passwd | cut -d ":" -f 3
Результат:
0
1
2
3
4
5
6
7
8
9
10
13
33
34
38
39
41
65534
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
1000
999
127
3) Ваше входное имя в системе;
Команда: whoami
Результат: helena

4.3
1) Информарция о моих файлах прописными буквами
Команда: ls -l | tr [:lower:] [:upper:]
Результат:
итого 116
-RWXRWXR-X 1 HELENA HELENA 16744 фев 10 21:33 A.OUT
-RWXRWXR-X 1 HELENA HELENA 16848 фев 10 21:44 FILE_NAME
-RW-RW-R-- 1 HELENA HELENA   358 фев 10 21:44 FILE_NAME.C
-RWXRWXR-X 1 HELENA HELENA 16696 фев 10 21:06 HELLO
-RW-RW-R-- 1 HELENA HELENA 13871 фев 10 22:28 MYFILE.TXT
-RWXRWXR-X 1 HELENA HELENA 16744 фев 10 21:35 MY_OPEN
-RW-RW-R-- 1 HELENA HELENA   432 фев 10 21:30 MY_OPEN.C
-RW-RW-R-- 1 HELENA HELENA    67 фев 10 21:00 PROG.C
-RW-RW-R-- 1 HELENA HELENA  1696 фев 10 21:00 PROG.O
-RW-RW-R-- 1 HELENA HELENA    16 фев  8 20:49 TEMP

4.4
Сортировка файлов в моем каталоге
1) В алфавитном порядке
Команда: ls -l | sort
Результат:
-rw-rw-r-- 1 helena helena     5 фев 10 23:25 file_name.c
-rw-rw-r-- 1 helena helena 18652 фев 10 23:26 myfile.txt
-rw-rw-r-- 1 helena helena   358 фев 10 23:16 my_open.c
-rw-rw-r-- 1 helena helena    67 фев 10 21:00 prog.c

2) В порядке увеличения размеров файлов
Команда: ls -l | sort -n
Результат:
-rw-rw-r-- 1 helena helena     5 фев 10 23:25 file_name.c
-rw-rw-r-- 1 helena helena    67 фев 10 21:00 prog.c
-rw-rw-r-- 1 helena helena   358 фев 10 23:16 my_open.c
-rw-rw-r-- 1 helena helena 18316 фев 12 12:59 myfile.txt

3) В порядке уменьшения размеров файлов
Команда: ls -l | sort -n -r
Результат:
-rw-rw-r-- 1 helena helena 18316 фев 12 12:57 myfile.txt
-rw-rw-r-- 1 helena helena   358 фев 10 23:16 my_open.c
-rw-rw-r-- 1 helena helena    67 фев 10 21:00 prog.c
-rw-rw-r-- 1 helena helena     5 фев 10 23:25 file_name.c

4.5
Вывод повторяющихся размеров файлов из каталога /usr/bin. Для этого из вывода ls -l с помощью cut оставлены только размеры, отсортирован полученный  поток  и  из результата выделены только повторения.
Команда: ls -l /usr/bin | cut -b 27-34 | uniq -d
Результат:
	  13
      13
   43352
   14488
      21
   26928
   14480
       8
   14568
   80256
       3
     352
     275
     275
     281
     275
     279
      23
      23
      26
   14408
       7
      22
      26
      30
      31
      28
      26
      31
      31
      30
   22912
   67816
       3
      23
      25
      24
       6
       6
       6
       6
       6
   14656
       6
       5
   39176
      24
       5
   59744
 3478464
       4
    5656
     215
       9
       9
       9
       7
   59952
   59768
   67960
   18504
       9
       9
   10232
       6
4.6
1) Сравнение файлов prog.c и my__open.c
Команда: cmp prog.c my_open.c
Результат: 
prog.c my_open.c различаются: байт 30, строка 2

2) Сравнение файлов prog.o и my__open.o
Команда: cmp prog.o my_open.o
Результат: prog.o my_open.o различаются: байт 41, строка 1

4.7
Сравнение prog.c и my_open.c с помощью diff
Команда: diff -e prog.c my_open.c > eqv
Результат: 
Содержимое файла eqv: 
2,4c
int main ( argc, argv )
int argc;
char *argv [];
{
    if (argc > 1) {
        if (fopen(argv[1],"r") == NULL) {
            printf("%s: неудача при попытке открыть файл %s",argv[0],argv[1]);
        }
        else {
            printf("%s: файл %s открыт",argv[0],argv[1]);
        }
    } else {
        printf("открываемый файл не указан");
    }
}
.
2,4 - говорят о том, что что первый файл расходится со второй строки по четвертую относительно второго файла.
Также ниже представлены все строки, которые отличают my_open.c от prog.c

Вывод: в ходе данной лабораторной работы были изучены основные команды пользовательского интерфейса, цикл подготовки и использования программ, команды и утилиты обработки текстов
